package main

import (
	"context"
	"database/sql"
	"encoding/json"
	_ "github.com/go-sql-driver/mysql"
	"github.com/gorilla/mux"
	log "github.com/sirupsen/logrus"
	httpSwagger "github.com/swaggo/http-swagger"
	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
	"io/ioutil"
	"net/http"
	"os"
	"os/signal"
	"time"
	"trading/api"
	_ "trading/docs" // docs is generated by Swag CLI
	"trading/pages"
)

// Config struct
type Config struct {
	Address    string
	TradingURL string
	Login      string
	Password   string
	Dsn        string
	HubURL     string
}

var (
	config = &Config{}
	driver selenium.WebDriver
	page   pages.Page
)

func main() {
	file, err := os.OpenFile("./logs.log", os.O_CREATE|os.O_APPEND, 0644)
	if err != nil {
		log.Fatalln(err)
		return
	}
	defer file.Close()
	log.SetOutput(file)
	log.SetLevel(log.DebugLevel)

	data, err := ioutil.ReadFile("./config.json")
	if err != nil {
		log.Fatalln("cant read config file:", err)
		return
	}

	err = json.Unmarshal(data, config)
	if err != nil {
		log.Fatalln("cant parse config:", err)
		return
	}

	// main database settings
	dsn := config.Dsn
	dsn += "&charset=utf8"
	dsn += "&interpolateParams=true"
	db, err := sql.Open("mysql", dsn)
	db.SetMaxOpenConns(10)

	// first connection
	err = db.Ping()
	if err != nil {
		log.Fatalln(err)
		return
	}

	// set browser as chrome
	caps := selenium.Capabilities(map[string]interface{}{
		"browserName": "chrome",
	})

	chromeCaps := chrome.Capabilities{
		Path: "",
		Args: []string{
			"--headless",
			"--no-sandbox",
		},
	}
	caps.AddChrome(chromeCaps)

	// connect to selenium server
	driver, err = selenium.NewRemote(caps, config.HubURL)
	if err != nil {
		log.Fatalln("Failed to open session: ", err)
		return
	}
	defer driver.Quit()

	driver.SetPageLoadTimeout(time.Second * 10)
	page = pages.Page{Driver: driver}
	err = page.Driver.Get(config.TradingURL)

	if err != nil {
		log.Fatalf("Failed to load page: %s\n", err)
		return
	}
	login := pages.HomePage{Page: page}
	accoutPage := login.LoginToAccount(config.Login, config.Password)
	handlers := &api.Handler{
		DB:          db,
		AccountPage: accoutPage,
	}
	router := mux.NewRouter()
	/*router.HandleFunc("/orders", handlers.Add).Methods("POST")
	router.HandleFunc("/orders", handlers.GetOrders).Methods("GET")
	router.HandleFunc("/orders/{id:[0-9]+}", handlers.GetOrder).Methods("GET")
	router.HandleFunc("/orders/{id:[0-9]+}", handlers.DeleteOrder).Methods("DELETE")*/

	router.HandleFunc("/positions", handlers.Add).Methods("POST")
	router.HandleFunc("/positions", handlers.GetPositions).Methods("GET")
	router.HandleFunc("/positions/{id:[0-9]+}", handlers.GetPosition).Methods("GET")
	router.HandleFunc("/positions/{id:[0-9]+}", handlers.DeletePosition).Methods("DELETE")
	router.HandleFunc("/positions/{id:[0-9]+}", handlers.EditPosition).Methods("PUT")

	router.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)

	srv := &http.Server{
		Addr:         config.Address,
		WriteTimeout: time.Second * 15,
		ReadTimeout:  time.Second * 15,
		IdleTimeout:  time.Second * 60,
		Handler:      router,
	}
	go func() {
		if err := srv.ListenAndServe(); err != nil {
			log.Println(err)
		}
	}()

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	<-c

	// Create a deadline to wait for.
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*10)
	defer cancel()
	srv.Shutdown(ctx)
	log.Println("shutting down")
	os.Exit(0)
}
